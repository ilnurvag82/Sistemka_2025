public class ChickenEggDebate {
    private static String lastWord = "";
    private static final Object lock = new Object();
    
    public static void main(String[] args) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∫—É—Ä–∏—Ü—ã –∏ —è–π—Ü–∞
        Thread chickenThread = new Thread(new ChickenRunnable(), "Chicken");
        Thread eggThread = new Thread(new EggRunnable(), "Egg");
        
        System.out.println("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–ø–æ—Ä: —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å —Å–Ω–∞—á–∞–ª–∞?");
        System.out.println("========================================");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
        chickenThread.start();
        eggThread.start();
        
        try {
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é join()
            chickenThread.join();
            eggThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é isAlive()
        boolean chickenAlive = chickenThread.isAlive();
        boolean eggAlive = eggThread.isAlive();
        
        System.out.println("========================================");
        System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ø–æ—Ä–∞:");
        System.out.println("–ü–æ—Ç–æ–∫ –ö—É—Ä–∏—Ü–∞ –∞–∫—Ç–∏–≤–µ–Ω: " + chickenAlive);
        System.out.println("–ü–æ—Ç–æ–∫ –Ø–π—Ü–æ –∞–∫—Ç–∏–≤–µ–Ω: " + eggAlive);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å–ø–æ—Ä–∞
        if (!chickenAlive && !eggAlive) {
            System.out.println("\n‚ö° –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢:");
            if (lastWord.equals("–ö—É—Ä–∏—Ü–∞")) {
                System.out.println("üèÜ –ü–û–ë–ï–î–ò–õ–ê –ö–£–†–ò–¶–ê! –ö—É—Ä–∏—Ü–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –ø–µ—Ä–≤–æ–π!");
            } else if (lastWord.equals("–Ø–π—Ü–æ")) {
                System.out.println("ü•ö –ü–û–ë–ï–î–ò–õ–û –Ø–ô–¶–û! –Ø–π—Ü–æ –ø–æ—è–≤–∏–ª–æ—Å—å –ø–µ—Ä–≤—ã–º!");
            } else {
                System.out.println("ü§î –°–ü–û–† –û–°–¢–ê–õ–°–Ø –ù–ï–†–ï–®–ï–ù–ù–´–ú!");
            }
        }
    }
    
    // –ü–æ—Ç–æ–∫ –¥–ª—è –∫—É—Ä–∏—Ü—ã
    static class ChickenRunnable implements Runnable {
        @Override
        public void run() {
            for (int i = 1; i <= 5; i++) {
                synchronized (lock) {
                    lastWord = "–ö—É—Ä–∏—Ü–∞";
                    System.out.println(Thread.currentThread().getName() + " –≥–æ–≤–æ—Ä–∏—Ç: " + lastWord + " (" + i + ")");
                }
                try {
                    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è–º–∏
                    Thread.sleep(150);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.println("–ü–æ—Ç–æ–∫ " + Thread.currentThread().getName() + " –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
        }
    }
    
    // –ü–æ—Ç–æ–∫ –¥–ª—è —è–π—Ü–∞
    static class EggRunnable implements Runnable {
        @Override
        public void run() {
            for (int i = 1; i <= 5; i++) {
                synchronized (lock) {
                    lastWord = "–Ø–π—Ü–æ";
                    System.out.println(Thread.currentThread().getName() + " –≥–æ–≤–æ—Ä–∏—Ç: " + lastWord + " (" + i + ")");
                }
                try {
                    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è–º–∏
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.println("–ü–æ—Ç–æ–∫ " + Thread.currentThread().getName() + " –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
        }
    }
}
